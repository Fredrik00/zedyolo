// Generated by gencpp from file object_detection/Predictions.msg
// DO NOT EDIT!


#ifndef OBJECT_DETECTION_MESSAGE_PREDICTIONS_H
#define OBJECT_DETECTION_MESSAGE_PREDICTIONS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <object_detection/Prediction.h>

namespace object_detection
{
template <class ContainerAllocator>
struct Predictions_
{
  typedef Predictions_<ContainerAllocator> Type;

  Predictions_()
    : predictions()  {
    }
  Predictions_(const ContainerAllocator& _alloc)
    : predictions(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::object_detection::Prediction_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::object_detection::Prediction_<ContainerAllocator> >::other >  _predictions_type;
  _predictions_type predictions;





  typedef boost::shared_ptr< ::object_detection::Predictions_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_detection::Predictions_<ContainerAllocator> const> ConstPtr;

}; // struct Predictions_

typedef ::object_detection::Predictions_<std::allocator<void> > Predictions;

typedef boost::shared_ptr< ::object_detection::Predictions > PredictionsPtr;
typedef boost::shared_ptr< ::object_detection::Predictions const> PredictionsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_detection::Predictions_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_detection::Predictions_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace object_detection

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'object_detection': ['/home/nvidia/catkin_ws/src/object_detection/msg'], 'std_msgs': ['/opt/ros/lunar/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::object_detection::Predictions_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_detection::Predictions_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_detection::Predictions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_detection::Predictions_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_detection::Predictions_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_detection::Predictions_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_detection::Predictions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8fe2bd78bcfaea922c71ab27bc03ae4c";
  }

  static const char* value(const ::object_detection::Predictions_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8fe2bd78bcfaea92ULL;
  static const uint64_t static_value2 = 0x2c71ab27bc03ae4cULL;
};

template<class ContainerAllocator>
struct DataType< ::object_detection::Predictions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_detection/Predictions";
  }

  static const char* value(const ::object_detection::Predictions_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_detection::Predictions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Prediction[] predictions\n\
\n\
================================================================================\n\
MSG: object_detection/Prediction\n\
string[] classes\n\
float64[] probabilities\n\
int64 xmin\n\
int64 ymin\n\
int64 xmax\n\
int64 ymax\n\
float64 distance\n\
float64 angle\n\
float64 xcoord\n\
float64 ycoord\n\
";
  }

  static const char* value(const ::object_detection::Predictions_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_detection::Predictions_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.predictions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Predictions_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_detection::Predictions_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_detection::Predictions_<ContainerAllocator>& v)
  {
    s << indent << "predictions[]" << std::endl;
    for (size_t i = 0; i < v.predictions.size(); ++i)
    {
      s << indent << "  predictions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::object_detection::Prediction_<ContainerAllocator> >::stream(s, indent + "    ", v.predictions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_DETECTION_MESSAGE_PREDICTIONS_H
